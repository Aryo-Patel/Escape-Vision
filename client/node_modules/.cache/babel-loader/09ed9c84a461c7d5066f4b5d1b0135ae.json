{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryoman\\\\Desktop\\\\coding_stuff\\\\MERN Projects\\\\EscapeVision\\\\client\\\\src\\\\components\\\\builder\\\\Builder.js\";\nimport React, { Fragment, useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom'; //jquery to make selecting elements significantly easier\n\nimport $ from 'jquery'; //redux imports\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'; //technically not redux, but I'm using it for redux purposes\n\nimport { addQuestionAnswers } from '../../actions/userSelections'; //styling import\n\nimport '../../CSS/builder/builder.css';\n/*This is the component that a teacher will be redirected to after they select\r\nwhat subject they are going to be teaching. I am going to add some redux to the\r\napp so that the application can keep track of what subject the teacher is planning\r\non teaching, but that will come later */\n//For development purposes the number of questions is set to 1\n\nconst Builder = ({\n  addQuestionAnswers\n}) => {\n  //This code sets the number of questions that the teacher will add.\n  //This will become a scalable value later on\n  const NUMBER_OF_QUESTIONS = 3;\n  const questionArray = new Array(NUMBER_OF_QUESTIONS);\n\n  for (let i = 1; i <= NUMBER_OF_QUESTIONS; i++) {\n    questionArray[i] = i;\n  } //State component checks to see if form has been submitted, if it has,\n  //state tells the redirect component to redirect to choosing a game screen\n\n\n  const [redirect, toggleRedirect] = useState(false); //on submit will redirect to chosing the game if all fields are filled out\n  //additionally, onSubmit will add what the question/answer choices are to redux \n\n  const onSubmit = e => {\n    e.preventDefault(); //this will be the array that everything is returned in\n\n    let questionAnswerArray = new Array(NUMBER_OF_QUESTIONS); //questions will be an object\n\n    let questionPairs = Array.from($('.questions div'));\n    let questions = [];\n    $('.questions div input:nth-child(2)').each(function () {\n      questions.push($(this).val());\n    });\n    let files = [];\n    let inputFiles = $('input[type=\"file\"]').each(function () {\n      if ($(this)[0].files.length > 0) {} else {\n        inputFiles.push(\" \");\n      }\n\n      ;\n    });\n    questionPairs.forEach(question => {\n      console.log(question);\n    }); //answers will be an array\n    //toggleRedirect(true);\n  }; //fucntion to check state of redirect\n\n\n  const checkRedirect = () => {\n    if (redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/game-chooser\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 20\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, checkRedirect(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"builder-top-spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    className: \"builder-back-button\",\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"builder-container\",\n    onSubmit: e => onSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Enter the problems along with the correct answers here \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 72\n    }\n  }), \"Text is required, but uploading a file is optional\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-answer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"questions-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, \"Questions\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, questionArray.map((question, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    id: NUMBER_OF_QUESTIONS + question,\n    className: \"question-li questions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-image-text-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: question,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 37\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answers-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, \"Answers\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }, questionArray.map((answer, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    id: answer,\n    className: \"question-li answers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: answer,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 33\n    }\n  })))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"builder-input-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }))));\n};\n\nBuilder.propTypes = {\n  addQuestionAnswers: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addQuestionAnswers\n})(Builder);","map":{"version":3,"sources":["C:/Users/Aryoman/Desktop/coding_stuff/MERN Projects/EscapeVision/client/src/components/builder/Builder.js"],"names":["React","Fragment","useState","Redirect","Link","$","connect","PropTypes","addQuestionAnswers","Builder","NUMBER_OF_QUESTIONS","questionArray","Array","i","redirect","toggleRedirect","onSubmit","e","preventDefault","questionAnswerArray","questionPairs","from","questions","each","push","val","files","inputFiles","length","forEach","question","console","log","checkRedirect","map","index","answer","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, {Fragment, useState} from 'react';\r\nimport {Redirect, Link } from 'react-router-dom';\r\n\r\n//jquery to make selecting elements significantly easier\r\nimport $ from 'jquery';\r\n//redux imports\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types'; //technically not redux, but I'm using it for redux purposes\r\nimport {addQuestionAnswers} from '../../actions/userSelections';\r\n\r\n//styling import\r\nimport '../../CSS/builder/builder.css';\r\n/*This is the component that a teacher will be redirected to after they select\r\nwhat subject they are going to be teaching. I am going to add some redux to the\r\napp so that the application can keep track of what subject the teacher is planning\r\non teaching, but that will come later */\r\n//For development purposes the number of questions is set to 1\r\nconst Builder = ({addQuestionAnswers}) => {\r\n    //This code sets the number of questions that the teacher will add.\r\n    //This will become a scalable value later on\r\n    const NUMBER_OF_QUESTIONS = 3;\r\n    const questionArray = new Array(NUMBER_OF_QUESTIONS);\r\n    for(let i = 1; i <= NUMBER_OF_QUESTIONS; i++){\r\n        questionArray[i] = i;\r\n    }\r\n\r\n    //State component checks to see if form has been submitted, if it has,\r\n    //state tells the redirect component to redirect to choosing a game screen\r\n    const [redirect, toggleRedirect] = useState(false);\r\n\r\n    //on submit will redirect to chosing the game if all fields are filled out\r\n    //additionally, onSubmit will add what the question/answer choices are to redux \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        //this will be the array that everything is returned in\r\n        let questionAnswerArray = new Array(NUMBER_OF_QUESTIONS);\r\n\r\n        //questions will be an object\r\n        let questionPairs = Array.from($('.questions div'));\r\n\r\n        let questions = [];\r\n        $('.questions div input:nth-child(2)').each(function(){\r\n            questions.push($(this).val());\r\n        });\r\n        let files= [];\r\n        let inputFiles = $('input[type=\"file\"]').each(function(){\r\n            if($(this)[0].files.length > 0){\r\n\r\n            }\r\n            else{\r\n                inputFiles.push(\" \");\r\n            };\r\n        });\r\n        questionPairs.forEach(question => {\r\n\r\n            console.log(question);\r\n        });\r\n        //answers will be an array\r\n        //toggleRedirect(true);\r\n    }\r\n\r\n    //fucntion to check state of redirect\r\n    const checkRedirect = () =>{\r\n        if(redirect){\r\n            return <Redirect to = '/game-chooser' />\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        {checkRedirect()}\r\n        <div className = \"builder-top-spacer\"></div>\r\n        {/*Link allows user to go back to the subject selector page */}\r\n        <Link className = \"builder-back-button\" to = \"/\">Back</Link>\r\n        <form className = 'builder-container' onSubmit = {e => onSubmit(e)}>\r\n            <h3>Enter the problems along with the correct answers here <br/>\r\n            Text is required, but uploading a file is optional</h3>\r\n            <div className = \"question-answer-container\">\r\n                <div className = \"questions-container\">\r\n                    <span>Questions</span>\r\n                    <ul>\r\n    {/*mapping through the number of questions and creating an input for that */}\r\n                        {questionArray.map((question, index) =>(\r\n                            <li key = {index} id = {NUMBER_OF_QUESTIONS + question} className = \"question-li questions\">\r\n                                <div className = 'question-image-text-holder'>\r\n                                    <input type = 'file' accept = \"image/*\" />\r\n                                    <input placeholder = {question}  required/>\r\n                                </div>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n                <div className = \"answers-container\">\r\n                    <span>Answers</span>\r\n                    <ul>\r\n    {/*mapping through the number of questions and creating an input for that */}\r\n                        {questionArray.map((answer, index) =>(\r\n                            <li key = {index} id = {answer} className = \"question-li answers\">\r\n                                <input placeholder = {answer} required/>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className= 'builder-input-holder'>\r\n                <input type = 'submit' />\r\n            </div>\r\n        </form>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\nBuilder.propTypes = {\r\n    addQuestionAnswers : PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {addQuestionAnswers})(Builder);"]},"metadata":{},"sourceType":"module"}