{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aryoman\\\\Desktop\\\\coding_stuff\\\\MERN Projects\\\\EscapeVision\\\\client\\\\src\\\\components\\\\builder\\\\Builder.js\";\nimport React, { Fragment, useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom'; //jquery to make selecting elements significantly easier\n\nimport $ from 'jquery'; //redux imports\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types'; //technically not redux, but I'm using it for redux purposes\n\nimport { addQuestionAnswers } from '../../actions/userSelections'; //styling import\n\nimport '../../CSS/builder/builder.css';\n/*This is the component that a teacher will be redirected to after they select\r\nwhat subject they are going to be teaching. I am going to add some redux to the\r\napp so that the application can keep track of what subject the teacher is planning\r\non teaching, but that will come later */\n//For development purposes the number of questions is set to 1\n\nconst Builder = ({\n  addQuestionAnswers\n}) => {\n  //This code sets the number of questions that the teacher will add.\n  //This will become a scalable value later on\n  const NUMBER_OF_QUESTIONS = 1;\n  const questionArray = new Array(NUMBER_OF_QUESTIONS);\n\n  for (let i = 1; i <= NUMBER_OF_QUESTIONS; i++) {\n    questionArray[i] = i;\n  } //State component checks to see if form has been submitted, if it has,\n  //state tells the redirect component to redirect to choosing a game screen\n\n\n  const [redirect, toggleRedirect] = useState(false); //on submit will redirect to chosing the game if all fields are filled out\n  //additionally, onSubmit will add what the question/answer choices are to redux \n\n  const onSubmit = e => {\n    e.preventDefault(); //this will be the array that everything is returned in\n\n    let questionAnswerArray = new Array(NUMBER_OF_QUESTIONS); //creates the array with all the questions\n\n    let questions = [];\n    $('.question').each(function () {\n      questions.push($(this).val());\n    }); //creates teh array with all the supporting files\n\n    let files = [];\n    $('input[type=\"file\"]').each(function () {\n      if ($(this)[0].files.length > 0) {\n        files.push($(this)[0].files[0]);\n      } else {\n        files.push(\" \");\n      }\n\n      ;\n    }); //answers will be an array\n\n    let answers = [];\n    $('.answer').each(function () {\n      answers.push($(this).val());\n    });\n\n    for (let i = 0; i < questionAnswerArray.length; i++) {\n      questionAnswerArray[i] = {\n        question: questions[i],\n        file: files[i],\n        answer: answers[i]\n      };\n    }\n\n    console.log(questionAnswerArray); //sends data to the action to add it to the reducer\n    //addQuestionAnswers(questionAnswerArray);\n    //moves on to the next question\n    //toggleRedirect(true);\n  }; //fucntion to check state of redirect\n\n\n  const checkRedirect = () => {\n    if (redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/game-chooser\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 20\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, checkRedirect(), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"builder-top-spacer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    className: \"builder-back-button\",\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"builder-container\",\n    onSubmit: e => onSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Enter the problems along with the correct answers here \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 76\n    }\n  }), \"Text is required, but uploading a file is optional\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-answer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"questions-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, questionArray.map((question, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    id: NUMBER_OF_QUESTIONS + question,\n    className: \"question-li questions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-image-text-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    id: \"file-input\",\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"file-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 41\n    }\n  }, \"Add a file\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"question\",\n    type: \"text\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"question-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 45\n    }\n  }, \"Question \", index, \":\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: true,\n    className: \"answer\",\n    type: \"text\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"answer-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 45\n    }\n  }, \"Answer\")))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"builder-input-holder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }))));\n};\n\nBuilder.propTypes = {\n  addQuestionAnswers: PropTypes.func.isRequired\n};\nexport default connect(null, {\n  addQuestionAnswers\n})(Builder);","map":{"version":3,"sources":["C:/Users/Aryoman/Desktop/coding_stuff/MERN Projects/EscapeVision/client/src/components/builder/Builder.js"],"names":["React","Fragment","useState","Redirect","Link","$","connect","PropTypes","addQuestionAnswers","Builder","NUMBER_OF_QUESTIONS","questionArray","Array","i","redirect","toggleRedirect","onSubmit","e","preventDefault","questionAnswerArray","questions","each","push","val","files","length","answers","question","file","answer","console","log","checkRedirect","map","index","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\n//jquery to make selecting elements significantly easier\r\nimport $ from 'jquery';\r\n//redux imports\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types'; //technically not redux, but I'm using it for redux purposes\r\nimport { addQuestionAnswers } from '../../actions/userSelections';\r\n\r\n//styling import\r\nimport '../../CSS/builder/builder.css';\r\n/*This is the component that a teacher will be redirected to after they select\r\nwhat subject they are going to be teaching. I am going to add some redux to the\r\napp so that the application can keep track of what subject the teacher is planning\r\non teaching, but that will come later */\r\n//For development purposes the number of questions is set to 1\r\nconst Builder = ({ addQuestionAnswers }) => {\r\n    //This code sets the number of questions that the teacher will add.\r\n    //This will become a scalable value later on\r\n    const NUMBER_OF_QUESTIONS = 1;\r\n    const questionArray = new Array(NUMBER_OF_QUESTIONS);\r\n    for (let i = 1; i <= NUMBER_OF_QUESTIONS; i++) {\r\n        questionArray[i] = i;\r\n    }\r\n\r\n    //State component checks to see if form has been submitted, if it has,\r\n    //state tells the redirect component to redirect to choosing a game screen\r\n    const [redirect, toggleRedirect] = useState(false);\r\n\r\n    //on submit will redirect to chosing the game if all fields are filled out\r\n    //additionally, onSubmit will add what the question/answer choices are to redux \r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        //this will be the array that everything is returned in\r\n        let questionAnswerArray = new Array(NUMBER_OF_QUESTIONS);\r\n\r\n        //creates the array with all the questions\r\n        let questions = [];\r\n        $('.question').each(function () {\r\n            questions.push($(this).val());\r\n        });\r\n\r\n        //creates teh array with all the supporting files\r\n        let files = [];\r\n        $('input[type=\"file\"]').each(function () {\r\n            if ($(this)[0].files.length > 0) {\r\n                files.push($(this)[0].files[0]);\r\n            }\r\n            else {\r\n                files.push(\" \");\r\n            };\r\n        });\r\n\r\n        //answers will be an array\r\n        let answers = [];\r\n        $('.answer').each(function () {\r\n            answers.push($(this).val());\r\n        });\r\n\r\n        for (let i = 0; i < questionAnswerArray.length; i++) {\r\n            questionAnswerArray[i] = {\r\n                question: questions[i],\r\n                file: files[i],\r\n                answer: answers[i]\r\n            }\r\n        }\r\n        console.log(questionAnswerArray);\r\n        //sends data to the action to add it to the reducer\r\n        //addQuestionAnswers(questionAnswerArray);\r\n\r\n        //moves on to the next question\r\n        //toggleRedirect(true);\r\n    }\r\n\r\n    //fucntion to check state of redirect\r\n    const checkRedirect = () => {\r\n        if (redirect) {\r\n            return <Redirect to='/game-chooser' />\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            {checkRedirect()}\r\n            <div className=\"builder-top-spacer\"></div>\r\n            {/*Link allows user to go back to the subject selector page */}\r\n            <Link className=\"builder-back-button\" to=\"/\">Back</Link>\r\n            <form className='builder-container' onSubmit={e => onSubmit(e)}>\r\n                <h3>Enter the problems along with the correct answers here <br />\r\n            Text is required, but uploading a file is optional</h3>\r\n                <div className=\"question-answer-container\">\r\n                    <div className=\"questions-container\">\r\n                        <ul>\r\n                            {/*mapping through the number of questions and creating an input for that */}\r\n                            {questionArray.map((question, index) => (\r\n                                <li key={index} id={NUMBER_OF_QUESTIONS + question} className=\"question-li questions\">\r\n                                    <div className='question-image-text-holder'>\r\n                                        <input type='file' id=\"file-input\" accept=\"image/*\" />\r\n                                        <label for=\"file-input\">Add a file</label>\r\n                                        <div className=\"question-holder\">\r\n                                            <input className='question' type=\"text\" required />\r\n                                            <small className=\"question-label\">Question {index}:</small>\r\n                                        </div>\r\n                                        <div className=\"answer-holder\">\r\n                                            <input placeholder className='answer' type=\"text\" required />\r\n                                            <small className=\"answer-label\">Answer</small>\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    {/* <div className=\"answers-container\">\r\n                        <span>Answers</span>\r\n                        <ul>\r\n                            \r\n                            {questionArray.map((answer, index) => (\r\n                                <Fragment>\r\n\r\n                                </Fragment>\r\n                            ))}\r\n                        </ul>\r\n                    </div> */}\r\n                </div>\r\n                <div className='builder-input-holder'>\r\n                    <input type='submit' />\r\n                </div>\r\n            </form>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nBuilder.propTypes = {\r\n    addQuestionAnswers: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, { addQuestionAnswers })(Builder);"]},"metadata":{},"sourceType":"module"}